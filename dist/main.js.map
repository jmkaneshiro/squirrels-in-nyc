{"version":3,"file":"main.js","mappings":"uCACEA,EAAAA,K,eCDFA,EAAOC,QAAU,CACfC,aAAcC,QAAQC,IAAIF,gBCAxBG,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaP,QAGrB,IAAID,EAASK,EAAyBE,GAAY,CAGjDN,QAAS,IAOV,OAHAS,EAAoBH,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,S,wBChBR,SAASU,IAGd,IAAMC,EAAcC,EAAEC,IAAI,SAEpBC,EAAeF,EAAEG,KAAKC,OAAO,CACjCC,QAAS,CACPC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,OAIhBC,EAAmB,IAAIP,EAAa,CAAEQ,QClB9C,uCDmBIC,EAAuB,IAAIT,EAAa,CAAEQ,QEnB9C,2CFoBIE,EAAoB,IAAIV,EAAa,CAAEQ,QGpB3C,wCHsBE,SAASG,EAAaC,EAASC,GAC7B,MAAkED,EAAQE,WAAlEC,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,SAAUC,EAA5C,EAA4CA,SAAUC,EAAtD,EAAsDA,QAEhDC,EAAaR,EAAQE,WAAWO,KAAKC,QAAQ,sBAAuB,YAC7D,IAAIC,KAAKH,GAEtBP,EAAMW,UAAN,6DAGkBJ,EAHlB,2CAIuBL,EAJvB,uCAKmBC,EALnB,0CAMsBC,EANtB,yCAOqBE,EAPrB,2CAQuBD,EARvB,yBAyBFpB,EAAE2B,UAAU,qDAAsD,CAChEC,YAAa,sFACbC,QAAS,GACTC,QAAS,GACTC,SAAU,IACVC,YAAa,IACZC,MAAMlC,GAGT,IAAMmC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,4DAChBF,EAAIG,OAAS,WACX,IAAMC,EAAOC,KAAKC,MAAMN,EAAIO,UAEtBC,EAAiB1C,EAAE2C,QAAQL,EAAM,CACrCM,OAAQ,SAAS9B,EAASC,GACvB,MAAgD,UAAzCD,EAAQE,WAAWC,mBAE7B4B,aAAc,SAAU/B,EAASgC,GAC/B,OAAO9C,EAAE+C,OAAOD,EAAQ,CACtBE,KAAMpC,KAGVqC,cAAepC,IAGXqC,EAAoBlD,EAAE2C,QAAQL,EAAM,CACxCM,OAAQ,SAAU9B,EAASC,GACzB,MAAgD,aAAzCD,EAAQE,WAAWC,mBAE5B4B,aAAc,SAAU/B,EAASgC,GAC/B,OAAO9C,EAAE+C,OAAOD,EAAQ,CACtBE,KAAMrC,KAGVsC,cAAepC,IAGXsC,EAAgBnD,EAAE2C,QAAQL,EAAM,CACpCM,OAAQ,SAAU9B,EAASC,GACzB,MAAgD,SAAzCD,EAAQE,WAAWC,mBAE5B4B,aAAc,SAAU/B,EAASgC,GAC/B,OAAO9C,EAAE+C,OAAOD,EAAQ,CACtBE,KAAMvC,KAGVwC,cAAepC,IAGXuC,EAAepD,EAAE2C,QAAQL,EAAM,CAEnCO,aAAc,SAAU/B,EAASgC,GAC/B,IAAMO,EAAkBvC,EAAQE,WAAWC,kBAC3C,MAAwB,aAApBoC,EACKrD,EAAE+C,OAAOD,EAAQ,CAAEE,KAAMrC,IACH,UAApB0C,EACFrD,EAAE+C,OAAOD,EAAQ,CAAEE,KAAMpC,IAEzBZ,EAAE+C,OAAOD,EAAQ,CAAEE,KAAMvC,OAKtCV,EAAYuD,UAAUF,EAAaG,YAAa,CAC9CC,QAAS,CAAC,GAAG,MAGfzD,EAAY0D,SAASf,GACrB3C,EAAY0D,SAASP,GACrBnD,EAAY0D,SAASN,GAErB,IAAMO,EAAiBC,SAASC,eAAe,oBACzCC,EAAoBF,SAASC,eAAe,uBAC5CE,EAAgBH,SAASC,eAAe,mBAE9CF,EAAeK,iBAAiB,UAAU,WACpCC,KAAKC,QACPlE,EAAY0D,SAASf,GAErB3C,EAAYmE,YAAYxB,MAI5BmB,EAAkBE,iBAAiB,UAAU,WACvCC,KAAKC,QACPlE,EAAY0D,SAASP,GAErBnD,EAAYmE,YAAYhB,MAI5BY,EAAcC,iBAAiB,UAAU,WACnCC,KAAKC,QACPlE,EAAY0D,SAASN,GAErBpD,EAAYmE,YAAYf,OAI9BjB,EAAIiC,OIzJC,SAASC,IAEd,IAAMC,EAAmB,SAACC,GAAD,OACvBC,MAAM,yDACLC,MAAK,SAAA/B,GAAQ,OAAIA,EAASgC,UAC1BD,MAAK,SAAAlC,GAAI,OACRqB,SAASC,eAAeU,GAAWI,UAAYpC,EAAKqC,KAAKC,MAAMD,KAAKE,SAAWvC,EAAKwC,SAASC,+BAEjGV,EAAiB,uBAEjB,IAAMW,EAAOrB,SAASC,eAAe,QAErCD,SAASC,eAAe,cAAcG,iBAAiB,SAAS,WAC9DM,EAAiB,sBACjBW,EAAKC,UAAUC,OAAO,cACrB,GAEHvB,SAASC,eAAe,aAAaG,iBAAiB,SAAS,WAC7DM,EAAiB,uBACjBW,EAAKC,UAAUC,OAAO,cACrB,G,OCfLC,OAAOpB,iBAAiB,oBAAoB,WAE1C,IAAIjE,EADQ6D,SAASyB,cAAc,mBAEnC,IAAIhB,EAEJT,SAASC,eAAe,mBAAmBG,iBAAiB,SAAS,SAAUsB,GAC7EA,EAAEC,cAAcL,UAAUC,OAAO,uC","sources":["webpack://squirrels-of-central-park/./src/config/keys.js","webpack://squirrels-of-central-park/./src/config/keys_prod.js","webpack://squirrels-of-central-park/webpack/bootstrap","webpack://squirrels-of-central-park/./src/components/map.js","webpack://squirrels-of-central-park/./src/assets/map_icons/gray-squirrel-icon.svg","webpack://squirrels-of-central-park/./src/assets/map_icons/cinnamon-squirrel-icon.svg","webpack://squirrels-of-central-park/./src/assets/map_icons/black-squirrel-icon.svg","webpack://squirrels-of-central-park/./src/components/stories.js","webpack://squirrels-of-central-park/./src/index.js"],"sourcesContent":["if (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./keys_prod\");\n} else {\n  module.exports = require(\"./keys_dev\");\n}","module.exports = {\n  MAPBOX_TOKEN: process.env.MAPBOX_TOKEN\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// import \"../config/keys\";\nimport graySquirrelImg from \"../assets/map_icons/gray-squirrel-icon.svg\";\nimport blackSquirrelImg from \"../assets/map_icons/black-squirrel-icon.svg\";\nimport cinnamonSquirrelImg from \"../assets/map_icons/cinnamon-squirrel-icon.svg\";\n\nexport function Map() {\n  // Need following line if mapbox used\n  // const MAPBOX_TOKEN = require(\"../config/keys\").MAPBOX_TOKEN;\n  const squirrelMap = L.map('mapid');\n  //Add icons for each squirrel type\n  const SquirrelIcon = L.Icon.extend({\n    options: {\n      iconSize: [20, 20], // size of icon\n      iconAnchor: [10, 20], // set anchor relative to icon\n      popupAnchor: [5, -18] //set popup relative to anchor\n    }\n  });\n\n  const graySquirrelIcon = new SquirrelIcon({ iconUrl: graySquirrelImg }),\n    cinnamonSquirrelIcon = new SquirrelIcon({ iconUrl: cinnamonSquirrelImg }),\n    blackSquirrelIcon = new SquirrelIcon({ iconUrl: blackSquirrelImg });\n\n  function defaultPopup(feature, layer) {\n    const { primary_fur_color, shift, foraging, climbing, running } = feature.properties;\n\n    const dateString = feature.properties.date.replace(/(\\d{2})(\\d{2})(\\d+)/, '$1/$2/$3');\n    const date = new Date(dateString);\n\n    layer.bindPopup(\n      `<h2>Details<h2>\n        <ul>\n          <li>Date: ${dateString}</li>\n          <li>Fur Color: ${primary_fur_color}</li>\n          <li>Shift: ${shift}</li>\n          <li>Foraging: ${foraging}</li>\n          <li>Running: ${running}</li>\n          <li>Climibing: ${climbing}</li>\n        </ul>`\n    );\n  }\n  //For a prettier map, consider using Mapbox in the future\n  //Mapbox requires you to have an account and unique API key\n  // L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {\n  //   attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n  //   maxZoom: 18,\n  //   minZoom: 14,\n  //   id: 'mapbox/streets-v11',\n  //   tileSize: 512,\n  //   zoomOffset: -1,\n  //   accessToken: `${MAPBOX_TOKEN}`\n  // }).addTo(squirrelMap);\n\n  // Create base tile for map with openstreetmap\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"https://openstreetmap.org/copyright\">OpenStreetMap contributors</a>',\n    maxZoom: 18,\n    minZoom: 14,\n    tileSize: 512,\n    zoomOffset: -1,\n  }).addTo(squirrelMap);\n\n  // Plot squirrel markers and popups on mapwhen geoJSON is loaded from Api\n  const xhr = new XMLHttpRequest();\n  xhr.open('GET', 'https://data.cityofnewyork.us/resource/vfnx-vebw.geojson');\n  xhr.onload = () => {\n    const data = JSON.parse(xhr.response);\n\n    const blackSquirrels = L.geoJSON(data, {\n      filter: function(feature, layer) {\n         return feature.properties.primary_fur_color === \"Black\";\n      },\n      pointToLayer: function (feature, latlng) {\n        return L.marker(latlng, {\n          icon: blackSquirrelIcon\n        });\n      },\n      onEachFeature: defaultPopup\n    });\n\n    const cinnamonSquirrels = L.geoJSON(data, {\n      filter: function (feature, layer) {\n        return feature.properties.primary_fur_color === \"Cinnamon\";\n      },\n      pointToLayer: function (feature, latlng) {\n        return L.marker(latlng, {\n          icon: cinnamonSquirrelIcon\n        });\n      },\n      onEachFeature: defaultPopup\n    });\n\n    const graySquirrels = L.geoJSON(data, {\n      filter: function (feature, layer) {\n        return feature.properties.primary_fur_color === \"Gray\";\n      },\n      pointToLayer: function (feature, latlng) {\n        return L.marker(latlng, {\n          icon: graySquirrelIcon\n        });\n      },\n      onEachFeature: defaultPopup\n    });\n\n    const allSquirrels = L.geoJSON(data, {\n      //Set squirrel icon based on geoJSON property primary_fur_color\n      pointToLayer: function (feature, latlng) {\n        const primaryFurColor = feature.properties.primary_fur_color;\n        if (primaryFurColor === \"Cinnamon\") {\n          return L.marker(latlng, { icon: cinnamonSquirrelIcon });\n        } else if (primaryFurColor === \"Black\") {\n          return L.marker(latlng, { icon: blackSquirrelIcon });\n        } else {\n          return L.marker(latlng, { icon: graySquirrelIcon });\n        }\n      }\n    });\n\n    squirrelMap.fitBounds(allSquirrels.getBounds(), {\n      padding: [20,20]\n    });\n\n    squirrelMap.addLayer(blackSquirrels);\n    squirrelMap.addLayer(cinnamonSquirrels);\n    squirrelMap.addLayer(graySquirrels);\n    //change squirrel filter on click\n    const filterFurBlack = document.getElementById('filter-fur-black');\n    const filterFurCinnamon = document.getElementById('filter-fur-cinnamon');\n    const filterFurGray = document.getElementById('filter-fur-gray');\n\n    filterFurBlack.addEventListener('change', function () {\n      if (this.checked) {\n        squirrelMap.addLayer(blackSquirrels);\n      } else {\n        squirrelMap.removeLayer(blackSquirrels);\n      }\n    });\n\n    filterFurCinnamon.addEventListener('change', function () {\n      if (this.checked) {\n        squirrelMap.addLayer(cinnamonSquirrels);\n      } else {\n        squirrelMap.removeLayer(cinnamonSquirrels);\n      }\n    });\n\n    filterFurGray.addEventListener('change', function () {\n      if (this.checked) {\n        squirrelMap.addLayer(graySquirrels);\n      } else {\n        squirrelMap.removeLayer(graySquirrels);\n      }\n    });\n  };\n  xhr.send();\n}","export default \"dist/images/gray-squirrel-icon.svg\";","export default \"dist/images/cinnamon-squirrel-icon.svg\";","export default \"dist/images/black-squirrel-icon.svg\";","export function Stories() {\n\n  const fetchRandomStory = (elementId) => (\n    fetch('https://data.cityofnewyork.us/resource/gfqj-f768.json')\n    .then(response => response.json())\n    .then(data => \n      document.getElementById(elementId).innerHTML = data[Math.floor(Math.random() * data.length)].note_squirrel_park_stories\n  ));\n  fetchRandomStory('story-details-front');\n\n  const card = document.getElementById('card');\n\n  document.getElementById('card-front').addEventListener('click', function () {\n    fetchRandomStory('story-details-back');\n    card.classList.toggle('flipped');\n  }, false);\n\n  document.getElementById('card-back').addEventListener('click', function () {\n    fetchRandomStory('story-details-front');\n    card.classList.toggle('flipped');\n  }, false);\n}\n","import \"./styles/index.scss\";\nimport \"./config/keys\";\nimport { Map } from './components/map';\nimport { Stories } from './components/stories';\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const map = document.querySelector(\"[component=map\");\n  new Map(map);\n  new Stories();\n\n  document.getElementById(\"squirrel-mascot\").addEventListener(\"click\", function (e) {\n    e.currentTarget.classList.toggle(\"rotate-counter-clock-on-click\");\n  });\n});\n\n"],"names":["module","exports","MAPBOX_TOKEN","process","env","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","Map","squirrelMap","L","map","SquirrelIcon","Icon","extend","options","iconSize","iconAnchor","popupAnchor","graySquirrelIcon","iconUrl","cinnamonSquirrelIcon","blackSquirrelIcon","defaultPopup","feature","layer","properties","primary_fur_color","shift","foraging","climbing","running","dateString","date","replace","Date","bindPopup","tileLayer","attribution","maxZoom","minZoom","tileSize","zoomOffset","addTo","xhr","XMLHttpRequest","open","onload","data","JSON","parse","response","blackSquirrels","geoJSON","filter","pointToLayer","latlng","marker","icon","onEachFeature","cinnamonSquirrels","graySquirrels","allSquirrels","primaryFurColor","fitBounds","getBounds","padding","addLayer","filterFurBlack","document","getElementById","filterFurCinnamon","filterFurGray","addEventListener","this","checked","removeLayer","send","Stories","fetchRandomStory","elementId","fetch","then","json","innerHTML","Math","floor","random","length","note_squirrel_park_stories","card","classList","toggle","window","querySelector","e","currentTarget"],"sourceRoot":""}